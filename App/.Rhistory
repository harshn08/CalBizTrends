v^1
v^2
p<-1:3
v^p
c(1:10)
v<- c(1:10)
p<-1:14
p<-1:4
v^p
p
length(p);
getwd()
str(datapoints)
list<-datapoints$ Min.Classification.Salary
length(list)
list[9]
kmeans(list,center=3)
kmeans(list,3)
is.language(list)
is.numeric(list)
is.na(list)
h<-is.na(list);
print(h)
plot(h)
plot(h)
plot(h)
kmeans(list, center=3)
kmeans(list, center=3)
list[!is.finite(m)] <- 0
centers<-kmeans(list, center=3)
print(centers<-kmeans(list, center=3))
print(centers)
centers<-kmeans(list, center=3)
list[!is.finite(m)] <- 0
list[!is.finite(list)] <- 0
centers<-kmeans(list, center=3)
centers
plot(list)
2+2
points(list[list$cluster==2,],col="blue")
plot(centers)
plot(centers,max(datapoints),max(datapoints),index,list)
max(datapoints)
#plot(centers,max(datapoints),max(datapoints),index,list)
centers
plot(clustering vectors)
plot(kmeans(list, center=3))
plot(kmeans(list, center=3),400,500)
plot(kmeans(list, center=3),400,400)
#plot(centers,max(datapoints),max(datapoints),index,list)
plot(kmeans(list, center=3,400,400)
read.csv(file="movies");
read.csv(file= "movies");
read.csv(file= "movies", header=T);
read.csv(file= "movies.csv", header=T);
read.csv(file= "movies.csv")
list<-read.csv(file= "movies.csv")
head(list)
tail(list)
head(datapoints)
results<- kmeans(newlist, centers=3)
datapoints<- read.csv(file="data.csv", header =T, sep=",")
head(datapoints)
salary<- datapoints$ Min.Classification.Salary
newlist<- na.omit(kmeans)
reaults<- kmeans(newlist, centers=3)
newlist<- na.omit(kmeans)
results<- kmeans(newlist, centers=3)
salary<- datapoints$ Min.Classification.Salary
plot(salary)
newlist<- na.omit(salary)
kmeans(newlist, centers=3)
plot(newlist,col=results$cluster,xlab="person(number of observation)",ylab="salary")
results<- kmeans(newlist, centers=3)
plot(newlist,col=results$cluster,xlab="person(number of observation)",ylab="salary")
Kmean.R
Rscript kmean.R
cd C:\
firstcolumn
firtscolumn=Datapoints$Max.Classification.Salary;
source('~/Kmean.R')
na.omit(firstcolumn);
firstcolumn=Datapoints$Max.Classification.Salary;
na.omit(firstcolumn);
source('~/Kmean.R')
summary(newlist);
var i=0;
source('~/Kmean.R')
i<-0
i
length(i)
#display the framed data.
# initialize centroids
#calculate the distance form each centroid to rest of the data recursively
#
len
source('~/.active-rstudio-document')
newlist(0)
source('~/Kmean.R')
newlist
summary(newlist)
i<-0
length(newlist)
for(i in 1:lem){}
for(i in 1:len){}
for(i in 1:len){newlist(i)}
length(newlist)
for(i in 1:len){newlist(i)}
source('~/Kmean.R')
newlist(2)
newlist
newlist[1]
newlist[2]
for(i in 1:100){}
for(i in 1:100){ newlist[i]}
for(i in 1:100){ print(newlist[i])}
source('~/.active-rstudio-document')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/.active-rstudio-document')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
Print(sum)
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
plot(sum)
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
newlist
newlist[2]+newlist[3]
source('~/Kmean.R')
source('~/Kmean.R')
setdw
setdw()
help(setdw())
getdw()
getdw();
getwd()
setwd("c:/R")
getwd
setwd("C:/Users/DARSHAN T S/Documents")
getwd()
rnorm(100)
rnorm(10)
plot(rnorm(100))
ls()
source('~/Graph.R')
source('~/Graph.R')
install.packages("igraph")
source('~/Graph.R')
plot(g,layout=lay,vertex.label='',vertex.size=2,vertex)
source('~/Graph.R')
source('~/Graph.R')
source('~/Graph.R')
source('~/Graph.R')
source('~/Graph.R')
source('~/Graph.R')
source('~/Kmean.R')
len
source('~/Kmean.R')
source('~/Kmean.R')
sum
source('~/Kmean.R')
print(i);
source('~/Kmean.R')
source('~/.active-rstudio-document')
source('~/Kmean.R')
sum
newlist
plot(sum)
plot(newlist)
a
source('~/PreTest.R')
source('~/PreTest.R')
a<-c(1,2,3)
a<-c(1,2,30,9)
source('~/PreTest.R')
source('~/PreTest.R')
source('~/PreTest.R')
source('~/PreTest.R')
source('~/Kmean.R')
source('~/Kmean.R')
newlist[100]
newlist[10]
newlist[10000]
len
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/PreTest.R')
source('~/PreTest.R')
source('~/PreTest.R')
plot(a)
len= length(a)
len
source('~/kmeans.R')
source('~/Optimized_Kmeans.R')
source('~/Optimized_Kmeans.R')
source('~/.active-rstudio-document')
source('~/PreTest.R')
source('~/PreTest.R')
plot(a)
source('~/PreTest.R')
source('~/PreTest.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
plot(a)
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
sum
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/.active-rstudio-document')
source('~/kmeans.R')
source('~/.active-rstudio-document')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/kmeans.R')
source('~/.active-rstudio-document')
source('~/kmeans.R')
a
source('~/kmeans.R')
source('~/kmeans.R')
a
a[1]
a[9]
a[3]
source('~/Kmean.R')
framed_data<-na.omit(newlist)
framed_data
plot(newlist)
length(framed_data)
source('~/Kmean.R')
kmeans(newlist)
kmeans(newlist,6)
kmeans(na.omit(newlist),6)
str(datapoints)
source('~/.active-rstudio-document')
barplot(table(newlist))
source('~/.active-rstudio-document')
source('~/Kmean.R')
source('~/Kmean.R')
print(row.names(newlist))
print(row.names(Datapoints))
source('~/kmeans.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/.active-rstudio-document')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/.active-rstudio-document')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
print(Depart)
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
View(talls)
View(talls)
source('~/Kmean.R')
source('~/.active-rstudio-document')
source('~/Kmean.R')
source('~/Kmean.R')
newdata
source('~/Kmean.R')
source('~/Kmean.R')
& Datapoints$Max.Classification.Salary == 65), ]
source('~/Kmean.R')
source('~/Kmean.R')
print(newdata$Min.Classification.Salary)
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
& Datapoints$Max.Classification.Salary < 10000000), ]
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Optimized_Kmeans.R')
source('~/Optimized_Kmeans.R')
cluster==3
clusters==3
table(results$cluster)
results$totss
results$betweenss
results$ifault
results$totss
clustering Vectors
help(kmeans)
find.cluster(results)
source('~/Kmean.R')
source('~/Kmean.R')
source('~/Kmean.R')
R.version()
R.version
install.packages("Runiversal", dependencies = FALSE)
Rversion
RVersion
R.Version()
source('~/kmeans.R')
install.packages("shiny", dependencies = FALSE)
require('shiny');
runGitHub(repo="rCharts_notebook_512paths", username="timelyportfolio")
source('~/.active-rstudio-document')
R.version
source('~/kmeans.R')
R.Version
R.Version
library(shiny)
# Define UI for application that plots random distributions
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 1,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
R.Version()
R.Version()
library('shiny')
install.packages("shiny", dependencies = FALSE)
library('shiny')
R.Version()
library('shiny')
install.packages("shiny", dependencies = FALSE)
library('shiny')
runExample("01_hello")
runExample("01_hello")
system.file("examples", package="shiny")
runExample("01_hello")
runExample("09_upload")
runExample("05_siders")
runExample("05_sliders")
runExample("App")
runAPP("App")
runApp("App")
runExample("09_upload")
runApp("App")
runApp("App")
runApp("App")
shiny::runApp('App')
shiny::runApp('App')
head(datapoints)
dim(datapoints)
datapoints<-read.csv(file = 'Data.csv', header=T, sep=',');
runApp("App")
source('~/try.R')
x <- cbind(newlist, results=results$cluster)
x
orderCluster <- function(i,data,centers){
dt <- data[data[,3] == i,]
ct <- centers[i,]
#Calculate distances
dt <- cbind(dt,dist = apply((dt[,1:2] - ct)^2,1,sum))
#Sort
dt[order(dt[,4]),]
}
ordercluster
source('~/.active-rstudio-document')
source('~/try.R')
View(x)
do.call(rbind,lapply(sort(unique(cl$cluster)),orderCluster,data = x,centers = cl$centers))
do.call(rbind,lapply(sort(unique(cl$cluster)),orderCluster,data = x,centers = cl$centers))
do.call(rbind,lapply(sort(unique(cl$cluster)),orderCluster,data = x,centers = cl$centers))
source('~/Optimized_Kmeans.R')
results<-kmeans(newlist,centers=2)
source('~/Optimized_Kmeans.R')
source('~/Optimized_Kmeans.R')
x
results$cluster
unique(results$cluster)
sort(unique(results$cluster))
data<-x;
data<-x
x <- cbind(newlist, results=results$cluster)
source('~/Optimized_Kmeans.R')
source('~/.active-rstudio-document');
runApp("App")
runExample("09_upload")
library("shiny")
runExample("09_upload")
runExample("09_upload")
runExample("01_upload")
runExample("01_hello")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
shiny::runApp('App')
runExample("01_hello")
runApp("App")
runApp("App")
runApp("App")
runExample("01_hello")
ggplot2('library')
library('ggplot')
library('ggplot2')
install.packages("ggplot2", dependencies = FALSE)
library('ggplot2')
runApp("App")
runExample("01_hello")
runExample("01_hello")
runExample("01_hello\")
;
shiny::runApp('App')
library(ggplot2)
install.packages("ggplot2", dependencies = FALSE)
Server.R
shiny::runApp('App')
runApp(App)
shiny::runApp('App')
library(ggplot2);
Server.R
library(ggplot2);
install.packages("ggplot2", dependencies = FALSE)
library(ggplot2);
install.packages("ggplot2")
library(ggplot2);
shiny::runApp('App')
runApp(App)
runApp('App')
runApp("App")
headerPanel("Hello");
dataset<- diamonds
print(dataset)
dim(dataset)
runExample("01_Hello")
faithful[,2]
faithful[,2]
faithful[1,]
faithful[1,2]
faithful[,2]
help(faithful)
faithful[,1]
length(faithful[,1])
length(faithful[,2])
faithful[,2]
faithful[,1]
runExample("01_Hello")
input$bin
input$bins
source('~/code.R')
input$bins
source('~/code.R')
cd APP
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
runApp("App")
